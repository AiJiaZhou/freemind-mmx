From: Jiang Xin <jiangxin@moon.ossxp.com>
Subject: [PATCH] t/output_encode_in_utf8

Save mm file in UTF-8 format.

Signed-off-by: Jiang Xin <jiangxin@moon.ossxp.com>

---
 freemind/accessories/freemind2flash.xsl            |    2 +-
 freemind/accessories/plugins/ExportWithXSLT.java   |    3 +-
 freemind/freemind/main/FreeMind.java               |    3 ++
 freemind/freemind/main/HtmlTools.java              |    2 +-
 freemind/freemind/main/XMLElement.java             |    6 ++--
 .../modes/mindmapmode/MindMapController.java       |    2 +-
 .../modes/mindmapmode/MindMapHTMLWriter.java       |    4 +--
 .../modes/mindmapmode/MindMapMapModel.java         |   30 ++++++++++++++++----
 8 files changed, 39 insertions(+), 13 deletions(-)

diff --git a/freemind/accessories/freemind2flash.xsl b/freemind/accessories/freemind2flash.xsl
index 536936d..926b15b 100644
--- a/freemind/accessories/freemind2flash.xsl
+++ b/freemind/accessories/freemind2flash.xsl
@@ -1,4 +1,4 @@
-<?xml version="1.0" encoding="iso-8859-1"?>
+<?xml version="1.0" encoding="utf-8"?>
 <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                 version="1.0">
 
diff --git a/freemind/accessories/plugins/ExportWithXSLT.java b/freemind/accessories/plugins/ExportWithXSLT.java
index 154d619..0630599 100644
--- a/freemind/accessories/plugins/ExportWithXSLT.java
+++ b/freemind/accessories/plugins/ExportWithXSLT.java
@@ -51,6 +51,7 @@ import javax.xml.transform.stream.StreamSource;
 import accessories.plugins.util.html.ClickableImageCreator;
 import accessories.plugins.util.xslt.ExportDialog;
 import freemind.extensions.ExportHook;
+import freemind.main.FreeMind;
 import freemind.main.Resources;
 import freemind.main.Tools;
 import freemind.modes.MindIcon;
@@ -198,7 +199,7 @@ public class ExportWithXSLT extends ExportHook {
 		// Generating output Stream
 		BufferedWriter fileout = new BufferedWriter(
 				new OutputStreamWriter(new FileOutputStream(pDirectoryName
-						+ File.separator + "map.mm")));
+						+ File.separator + "map.mm"), FreeMind.DEFAULT_CHARSET));
 		getController().getMap().getFilteredXml(fileout);
 		return success;
 	}
diff --git a/freemind/freemind/main/FreeMind.java b/freemind/freemind/main/FreeMind.java
index 6bf0b6d..2245967 100644
--- a/freemind/freemind/main/FreeMind.java
+++ b/freemind/freemind/main/FreeMind.java
@@ -88,6 +88,9 @@ import freemind.view.mindmapview.NodeView;
 
 public class FreeMind extends JFrame implements FreeMindMain {
 
+	// OSSXP.COM: set output character set to utf-8.
+	public static final String DEFAULT_CHARSET = "UTF-8";
+
 	public static final String LOG_FILE_NAME = "log";
 
 	private static final String PORT_FILE = "portFile";
diff --git a/freemind/freemind/main/HtmlTools.java b/freemind/freemind/main/HtmlTools.java
index 6d0a811..7738027 100644
--- a/freemind/freemind/main/HtmlTools.java
+++ b/freemind/freemind/main/HtmlTools.java
@@ -325,7 +325,7 @@ public class HtmlTools {
 		for (int i = 0; i < text.length(); ++i) {
 			myChar = text.charAt(i);
 			intValue = (int) text.charAt(i);
-			boolean outOfRange = intValue < 32  || intValue > 126;
+			boolean outOfRange = intValue < 32  || !Resources.getInstance().getBoolProperty("wh_nonascii_in_utf8") && intValue > 126;
 			if(pPreserveNewlines && myChar == '\n') {
 				outOfRange = false;
 			}
diff --git a/freemind/freemind/main/XMLElement.java b/freemind/freemind/main/XMLElement.java
index 191a81e..cbee403 100644
--- a/freemind/freemind/main/XMLElement.java
+++ b/freemind/freemind/main/XMLElement.java
@@ -2285,7 +2285,8 @@ public class XMLElement {
 	public String toString() {
 		try {
 			ByteArrayOutputStream out = new ByteArrayOutputStream();
-			OutputStreamWriter writer = new OutputStreamWriter(out);
+			// OSSXP.COM: Encode output to default_charset(UTF-8).
+			OutputStreamWriter writer = new OutputStreamWriter(out, FreeMind.DEFAULT_CHARSET);
 			this.write(writer);
 			writer.flush();
 			return new String(out.toByteArray());
@@ -2455,7 +2456,8 @@ public class XMLElement {
 				break;
 			default:
 				int unicode = (int) ch;
-				if ((unicode < 32) || (unicode > 126)) {
+				// OSSXP.COM: do not convert Chinese characters into &#blahblah;
+				if (!Resources.getInstance().getBoolProperty("wh_nonascii_in_utf8") && (unicode > 126) || (unicode < 32)) {
 					writer.write('&');
 					writer.write('#');
 					writer.write('x');
diff --git a/freemind/freemind/modes/mindmapmode/MindMapController.java b/freemind/freemind/modes/mindmapmode/MindMapController.java
index a34b79b..3c80be5 100644
--- a/freemind/freemind/modes/mindmapmode/MindMapController.java
+++ b/freemind/freemind/modes/mindmapmode/MindMapController.java
@@ -1890,7 +1890,7 @@ public class MindMapController extends ControllerAdapter implements
 	static public void saveHTML(MindMapNodeModel rootNodeOfBranch, File file)
 			throws IOException {
 		BufferedWriter fileout = new BufferedWriter(new OutputStreamWriter(
-				new FileOutputStream(file)));
+				new FileOutputStream(file), FreeMind.DEFAULT_CHARSET));
 		MindMapHTMLWriter htmlWriter = new MindMapHTMLWriter(fileout);
 		htmlWriter.saveHTML(rootNodeOfBranch);
 	}
diff --git a/freemind/freemind/modes/mindmapmode/MindMapHTMLWriter.java b/freemind/freemind/modes/mindmapmode/MindMapHTMLWriter.java
index 83bb1ac..0fa749a 100644
--- a/freemind/freemind/modes/mindmapmode/MindMapHTMLWriter.java
+++ b/freemind/freemind/modes/mindmapmode/MindMapHTMLWriter.java
@@ -92,7 +92,7 @@ class MindMapHTMLWriter {
 		for (int i = 0; i < len; ++i) {
 			myChar = text.charAt(i);
 			intValue = (int) text.charAt(i);
-			if (intValue >= 128) {
+			if (!Resources.getInstance().getBoolProperty("wh_nonascii_in_utf8") && intValue >= 128) {
 				result.append(convertSpecialChar(myChar));
 			} else {
 				spaceOccured = false;
@@ -662,4 +662,4 @@ class MindMapHTMLWriter {
 		return Resources.getInstance().getProperty(key);
 	}
 
-}
\ No newline at end of file
+}
diff --git a/freemind/freemind/modes/mindmapmode/MindMapMapModel.java b/freemind/freemind/modes/mindmapmode/MindMapMapModel.java
index a20c717..dc38a2e 100644
--- a/freemind/freemind/modes/mindmapmode/MindMapMapModel.java
+++ b/freemind/freemind/modes/mindmapmode/MindMapMapModel.java
@@ -184,7 +184,7 @@ public class MindMapMapModel extends MapAdapter {
 		// Returns success of the operation.
 		try {
 			BufferedWriter fileout = new BufferedWriter(new OutputStreamWriter(
-					new FileOutputStream(file)));
+					new FileOutputStream(file), FreeMind.DEFAULT_CHARSET));
 			rootNodeOfBranch.saveTXT(fileout,/* depth= */0);
 			fileout.close();
 			return true;
@@ -285,7 +285,7 @@ public class MindMapMapModel extends MapAdapter {
 				timerForAutomaticSaving.cancel();
 			}
 			BufferedWriter fileout = new BufferedWriter(new OutputStreamWriter(
-					new FileOutputStream(file)));
+					new FileOutputStream(file), FreeMind.DEFAULT_CHARSET));
 			getXml(fileout);
 
 			if (!isInternal) {
@@ -476,10 +476,30 @@ public class MindMapMapModel extends MapAdapter {
 	public MindMapNodeModel loadTree(ReaderCreator pReaderCreator,
 			boolean pAskUserBeforeUpdate) throws XMLParseException, IOException {
 		int versionInfoLength;
-		versionInfoLength = EXPECTED_START_STRINGS[0].length();
+		versionInfoLength = 0;
 		// reading the start of the file:
-		StringBuffer buffer = readFileStart(pReaderCreator.createReader(),
-				versionInfoLength);
+		// OSSXP.COM: 
+		//     because we add a xml declare, the mm file now begin with "<xml", 
+		//     so direct match mmap version will failed.
+		//     search "<map" and store matched line into buffer.
+		BufferedReader in=null;
+		String buffer = null;
+		try {
+			// get the file start into the memory:
+			in = new BufferedReader(pReaderCreator.createReader());
+			while ((buffer = in.readLine()) != null) {
+				// buffer contains line start with "<map", stop matching.
+				if (buffer.substring(0,4).equals("<map"))
+				{
+					break;
+				}
+			}
+			in.close();
+		} catch (Exception e) {
+			e.printStackTrace();
+			buffer = "";
+		}
+ 
 		// the resulting file is accessed by the reader:
 		Reader reader = null;
 		for (int i = 0; i < EXPECTED_START_STRINGS.length; i++) {
-- 
tg: (8cfa48e..) t/output_encode_in_utf8 (depends on: tgmaster)
