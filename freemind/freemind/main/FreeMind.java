/*FreeMind - A Program for creating and viewing Mindmaps
 *Copyright (C) 2000-2001  Joerg Mueller <joergmueller@bigfoot.com>
 *See COPYING for Details
 *
 *This program is free software; you can redistribute it and/or
 *modify it under the terms of the GNU General Public License
 *as published by the Free Software Foundation; either version 2
 *of the License, or (at your option) any later version.
 *
 *This program is distributed in the hope that it will be useful,
 *but WITHOUT ANY WARRANTY; without even the implied warranty of
 *MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *GNU General Public License for more details.
 *
 *You should have received a copy of the GNU General Public License
 *along with this program; if not, write to the Free Software
 *Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/*$Id: FreeMind.java,v 1.14 2001-06-22 20:35:14 ponder Exp $*/

package freemind.main;

import freemind.view.mindmapview.MapView;
import freemind.controller.MenuBar;
import freemind.controller.Controller;
import freemind.modes.ModeController;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.io.File;
import java.net.URL;
import java.util.Properties;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.PropertyResourceBundle;
import java.util.Map;
import java.util.HashMap;
import java.util.StringTokenizer;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.BorderLayout;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.ActionEvent;
import javax.swing.JScrollPane;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.UIManager;

public class FreeMind extends JFrame implements FreeMindMain {

    public static final String version = "0.3.5";
    //    public static final String defaultPropsURL = "freemind.properties";
    public URL defaultPropsURL;
    //    public static Properties defaultProps;
    public static Properties props;
    private JScrollPane scrollPane = new JScrollPane();
    private MenuBar menuBar;
    private JLabel status;
    private Map filetypes;//Maps endings of files ("html") to programs ("netscape")

    Controller c;//the one and only controller
    
    public FreeMind() {
        super("FreeMind");
	
	String propsLoc = "freemind.properties";
	defaultPropsURL = ClassLoader.getSystemResource(propsLoc);

	//load properties

	//Default Properties from .jar file
	Properties def = new Properties();
	try {
	    InputStream in = defaultPropsURL.openStream();
	    try {
		def.load(in);
	    } catch (Exception ex) {
		System.err.println("Panic! Error while loading default properties.");
	    } finally {
		in.close();
	    }

	    //Automagical properties, generated by freemind itself
	    Properties auto = new Properties(def);
	    try {
		in = new FileInputStream(Tools.expandFileName(def.getProperty("autoproperties")));
		auto.load(in);
	    } catch (Exception ex) {
		System.err.println("Panic! Error while loading auto properties.");
	    } finally {
		in.close();
	    }

	    //Users Properties, with highest priority (overwrite both other)
	    props = new Properties(auto);
	    try {
		in = new FileInputStream(Tools.expandFileName(auto.getProperty("userproperties")));
		props.load(in);
	    } catch (Exception ex) {	 
		System.err.println("Panic! Error while loading users properties.");
	    } finally {
		in.close();
	    }
	} catch (Exception ex) {
	    //even close() fails. what now?
	}

	//set Look&Feel
	try {
	    String lookAndFeel = props.getProperty("lookandfeel");
	    if (lookAndFeel.equals("windows")) {
		UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
	    } else if (lookAndFeel.equals("motif")) {
		UIManager.setLookAndFeel("com.sun.java.swing.plaf.motif.MotifLookAndFeel");
	    } else if (lookAndFeel.equals("mac")) {
		//Only available on macOS
		UIManager.setLookAndFeel("javax.swing.plaf.mac.MacLookAndFeel");
	    } else {
		//Metal is default
		UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
	    }
	} catch (Exception ex) {
	    System.err.println("Panic! Error while setting Look&Feel");
	}

	//Layout everything
	getContentPane().setLayout( new BorderLayout() );

	c = new Controller(this);

	//Create the MenuBar
	menuBar = new MenuBar(c);
	setJMenuBar(menuBar);

        //Create the scroll pane.
	scrollPane.setPreferredSize( new Dimension( 600, 400 ) );
	
	getContentPane().add( scrollPane, BorderLayout.CENTER );

	status = new JLabel();
	getContentPane().add( status, BorderLayout.SOUTH );

	//Disable the default close button, instead use windowListener
	setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);

	addWindowListener(new WindowAdapter() {
		public void windowClosing(WindowEvent e) {
		    c.quit.actionPerformed(new ActionEvent(this,0,"quit"));
		}		
		public void windowActivated(WindowEvent e) {
		    //This doesn't work the first time, it's called too early to get Focus
		    if ( (getView() != null) && (getView().getSelected() != null) ) {
			getView().getSelected().requestFocus();
		    }
		}
        });  

	c.changeToMode(getProperty("initial_mode"));

    }//Constructor

    public Container getViewport() {
		return scrollPane.getViewport();
    }
	
    public URL getResource(String name) {
	return ClassLoader.getSystemResource(name);
    }

    public String getProperty(String key) {
	return props.getProperty(key);
    }

    public void setProperty(String key, String value) {
	props.setProperty(key,value);
    }
    
    public void saveProperties() {
	try {
	    OutputStream out = new FileOutputStream(Tools.expandFileName(getProperty("autoproperties")));
	    //	    auto.store(out,null);
	    props.store(out,null);
	    out.close();
	} catch (Exception ex) {
	}
    }

    public MapView getView() {
	return c.getView();
    }

    public void setView(MapView view) {
	scrollPane.setViewportView(view);
	if(view != null) 
	    view.setAutoscrolls(true);//for some reason this doesn't work
    }

    public MenuBar getFreeMindMenuBar() {
	return menuBar;
    }

    public void out (String msg) {
	status.setText(msg);
	//	System.out.println(msg);
    }

    public void err (String msg) {
	status.setText(msg);	
	//	System.out.println(msg);
    }

    public void openDocument(URL url) throws Exception {
	String type = Tools.getExtension(url.getFile());
	out(type); //IMPLEMENT THIS
	String prog = getProgramForFile(type);

	//try to use default program (netscape etc)
	if (prog.equals("")) {
	    prog = getProgramForFile("default");
	}

	String document = null;

	//convert "file:" url's to local filenames
	if (url.getProtocol().equals("file")) {
	    document = url.getFile(); //check if this works for windows
	} else {
	    document = url.toString();
	}

	if (prog.equals("execute")) {
	    Runtime.getRuntime().exec( document );
	} else {
	    String[] call = { prog, document };
	    Runtime.getRuntime().exec( call );
	}
    }

    private String getProgramForFile(String type) {
	if (filetypes == null) {
	    filetypes = new HashMap();
	    String raw = getProperty("filetypes");
	    if (raw == null  || raw.equals("")) {
		return "";
	    }
	    StringTokenizer tokens = new StringTokenizer(raw, ",");
	    while (tokens.hasMoreTokens()) {
		StringTokenizer pair = new StringTokenizer(tokens.nextToken(),":");
		String key = pair.nextToken().trim().toLowerCase();
		String value = pair.nextToken().trim();
		filetypes.put(key,value);
	    }
	}
	return (String)filetypes.get(type.trim().toLowerCase());
    }

    /**Returns the ResourceBundle with the current language*/
    public ResourceBundle getResources() {
	String lang = getProperty("language");
	try {
	    InputStream in = ClassLoader.getSystemResource("Resources_"+lang+".properties").openStream();
	    PropertyResourceBundle resources = new PropertyResourceBundle(in);
	    in.close();
	    return resources;
	} catch (Exception ex) {
	    System.err.println("Error loading Resources");
	    return null;
	}
	//	return ResourceBundle.getBundle("Resources",locale);
    }

    public static void main(String[] args) {
	FreeMind frame = new FreeMind();
	
	ModeController ctrl = frame.c.getMode().getModeController();
	//This could be improved.
	try {
	    File fin;
	    for (int i=0; i<args.length; i++ ) {
		if (args[i].endsWith(".mm")) {
		    if (!args[i].startsWith(System.getProperty("file.separator"))) {
			args[i] = System.getProperty("user.dir") + args[i];
		    }
		    System.out.println("Attempting to load: " + args[i]);
		    fin = new File(args[i]);
		    ctrl.load(fin);
		}
	    }
	} catch (Exception ex) {
	    System.err.println("File not found error");
	    //	    System.exit(1);
	}

        frame.pack();
        frame.setVisible(true);

    }//main()
}
