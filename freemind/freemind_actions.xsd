<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">

	<xs:group name="base">
       <xs:choice>
	          <xs:element ref="menu_category"/>
	          <xs:element ref="menu_submenu"/>
	          <xs:element ref="menu_action"/>
	          <xs:element ref="menu_separator"/>
       </xs:choice>
	</xs:group>


	<xs:element name="menu_structure">
		<xs:complexType>
	      <xs:sequence  minOccurs="0" maxOccurs="unbounded">
	          <xs:element ref="menu_category"/>
	      </xs:sequence>
		</xs:complexType>		
	</xs:element>

    <xs:complexType name="menu_category_base">
 	      <xs:sequence>
	        <xs:choice minOccurs="0" maxOccurs="unbounded">
	          <xs:group ref="base"/>
	        </xs:choice>
	      </xs:sequence>
	      <xs:attribute name="name" use="required" type="xs:string"/>
	      <xs:attribute name="setSeparatorBefore" use="optional" type="xs:boolean" default="true"/>
    </xs:complexType>


  <xs:element name="menu_category">
	  <xs:complexType>
		<xs:complexContent>
			<xs:extension base="menu_category_base">
			</xs:extension>
		</xs:complexContent>
	  </xs:complexType>
  </xs:element>

  <xs:element name="menu_submenu">
	  <xs:complexType>
		<xs:complexContent>
			<xs:extension base="menu_category_base">
		      <xs:attribute name="name_ref" use="required" type="xs:string"/>
			</xs:extension>
		</xs:complexContent>
	  </xs:complexType>
  </xs:element>


  <xs:element name="menu_action">
    <xs:complexType>
	      <xs:attribute name="field" use="required" type="xs:string"/>
	      <xs:attribute name="key_ref" use="optional" type="xs:string"/>
	      <!-- if name is not given, field is used instead. -->
	      <xs:attribute name="name" use="optional" type="xs:string"/>
    </xs:complexType>
  </xs:element>

  <xs:element name="menu_separator">
    <xs:complexType>
    </xs:complexType>
  </xs:element>


	  <xs:complexType name="xml_action">
	  </xs:complexType>

	<!-- Compound action.  -->
	<xs:element name="compound_action">
	  <xs:complexType>
		<xs:complexContent>
			<xs:extension base="xml_action">
				<xs:choice minOccurs="0" maxOccurs="unbounded">
					<xs:element ref="compound_action"/>
					<xs:element ref="select_node_action"/>
					<xs:element ref="cut_node_action"/>
					<xs:element ref="paste_node_action"/>
					<xs:element ref="bold_node_action"/>
					<xs:element ref="delete_node_action"/>
					<xs:element ref="edit_node_action"/>
					<xs:element ref="new_node_action"/>
					<xs:element ref="undo_xml_action"/>
				</xs:choice>
			</xs:extension>
		</xs:complexContent>
	  </xs:complexType>
	</xs:element>

	<!-- Select action. Selects a node. -->
	<xs:element name="select_node_action">
	  <xs:complexType>
		<xs:complexContent>
			<xs:extension base="node_action">
			</xs:extension>
		</xs:complexContent>
	  </xs:complexType>
	</xs:element>

	<!-- Node actions. These actions involve exactly one node.-->
	<xs:element name="transferable_content">
		<xs:complexType>
	      <xs:attribute name="Transferable" use="optional" type="xs:string"/>
	      <xs:attribute name="TransferableAsPlainText" use="optional" type="xs:string"/>
	      <xs:attribute name="TransferableAsRTF" use="optional" type="xs:string"/>
		</xs:complexType>
	</xs:element>


	<!-- cut Action 
		The node is given in NodeCoordinates (see PasteAction).
		 -->
	<xs:element name="cut_node_action">
	  <xs:complexType>
		<xs:complexContent>
			<xs:extension base="node_action">
              <xs:sequence>
	            <xs:element ref="transferable_content" maxOccurs="1" minOccurs="1"/>				
              </xs:sequence>
		      <xs:attribute name="isLeft" use="required" type="xs:boolean"/>
		      <xs:attribute name="asSibling" use="required" type="xs:boolean"/>
			</xs:extension>
		</xs:complexContent>
	  </xs:complexType>
	</xs:element>

	<!-- Paste Action 
		The node is given in NodeCoordinates (see PasteAction).
		-->
	<xs:element name="paste_node_action">
	  <xs:complexType>
		<xs:complexContent>
			<xs:extension base="node_action">
              <xs:sequence>
		        <xs:element ref="transferable_content" maxOccurs="1" minOccurs="1"/>				
		      </xs:sequence>
		      <xs:attribute name="isLeft" use="required" type="xs:boolean"/>
		      <xs:attribute name="asSibling" use="required" type="xs:boolean"/>
			</xs:extension>
		</xs:complexContent>
	  </xs:complexType>
	</xs:element>

	<!-- Node actions. These actions involve exactly one node.-->
	  <xs:complexType name="node_action">
		<xs:complexContent>
			<xs:extension base="xml_action">
		      <xs:attribute name="node" use="required" type="xs:string"/>
			</xs:extension>
		</xs:complexContent>
	  </xs:complexType>

	<!-- Bold Action -->
	<xs:element name="bold_node_action">
	  <xs:complexType>
		<xs:complexContent>
			<xs:extension base="node_action">
		      <xs:attribute name="bold" use="required" type="xs:boolean"/>
			</xs:extension>
		</xs:complexContent>
	  </xs:complexType>
	</xs:element>

	<!-- Delete node Action 
		 This is done via the parent and its index, because at creation time of the node, the id was not present. -->
	<xs:element name="delete_node_action">
	  <xs:complexType>
		<xs:complexContent>
			<xs:extension base="node_action">
			</xs:extension>
		</xs:complexContent>
	  </xs:complexType>
	</xs:element>

	<!-- Text node Action (Base for edit and "new node" actions) -->
	  <xs:complexType name="text_node_action">
		<xs:complexContent>
			<xs:extension base="node_action">
		      <xs:attribute name="text" use="required" type="xs:string"/>
			</xs:extension>
		</xs:complexContent>
	  </xs:complexType>

	<!-- Edit node Action -->
	<xs:element name="edit_node_action">
	  <xs:complexType>
		<xs:complexContent>
			<xs:extension base="text_node_action"/>
		</xs:complexContent>
	  </xs:complexType>
	</xs:element>

	<!-- New node Action -->
	<xs:element name="new_node_action">
	  <xs:complexType>
		<xs:complexContent>
			<xs:extension base="node_action">
				<!--  for childs of root this denotes "left" or "right". -->
				<xs:attribute name="position"    use="optional" type="xs:string"/>
				<xs:attribute name="index"       use="optional" type="xs:int"/>
				<!-- This is the id the new node should have. Hopefully it is unique. -->
				<xs:attribute name="newId"    use="optional" type="xs:string"/>
			</xs:extension>
		</xs:complexContent>
	  </xs:complexType>
	</xs:element>

	<!-- Undo Action -->
	<xs:element name="undo_xml_action">
	  <xs:complexType>
		<xs:complexContent>
			<xs:extension base="xml_action">
				<!-- description contains the marshalled doAction for this undoAction. The doAction is performed by undo. -->
		      <xs:attribute name="description" use="required" type="xs:string"/>
				<!-- remedia contains the marshalled redoAction for this undoAction. The redoAction is performed by redo following undo. -->
		      <xs:attribute name="remedia" use="optional" type="xs:string"/>
			</xs:extension>
		</xs:complexContent>
	  </xs:complexType>
	</xs:element>


</xs:schema>
